function [M_ts,c_ts,S_ts,g_ts,v,dv] = Manip_dyn_ts(x,v,u_ts,m1,m2,m3,l1,l2,l3,d1,d2,d3,I1zz,I2zz,I3zz)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here

branch = 0;

[q1, q2, q3] = inverseKinematics3R(x(1), x(2), x(3),l1,l2,l3,branch);
[J,J_inv,J_T,J_T_inv] = Jacobian_3R(q1,q2,q3,l1,l2,l3);
dq = J_inv*v;
q = [q1;q2;q3];

dq1 = dq(1);
dq2 = dq(2);
dq3 = dq(3);
u = J_T*u_ts;
[M,c,S,g,~,ddq] = Manip_dyn(q,dq,u,m1,m2,m3,l1,l2,l3,d1,d2,d3,I1zz,I2zz,I3zz);

%% Jacobian dot
dJ = ...
[- dq1*(l2*cos(q1 + q2) + l1*cos(q1) + l3*cos(q1 + q2 + q3)) - dq2*(l2*cos(q1 + q2) + l3*cos(q1 + q2 + q3)) - dq3*l3*cos(q1 + q2 + q3), ...
 - (dq1 + dq2)*(l2*cos(q1 + q2) + l3*cos(q1 + q2 + q3)) - dq3*l3*cos(q1 + q2 + q3), ...
 -l3*cos(q1 + q2 + q3)*(dq1 + dq2 + dq3);
 
 - dq1*(l2*sin(q1 + q2) + l1*sin(q1) + l3*sin(q1 + q2 + q3)) - dq2*(l2*sin(q1 + q2) + l3*sin(q1 + q2 + q3)) - dq3*l3*sin(q1 + q2 + q3), ...
 - (dq1 + dq2)*(l2*sin(q1 + q2) + l3*sin(q1 + q2 + q3)) - dq3*l3*sin(q1 + q2 + q3),...
 -l3*sin(q1 + q2 + q3)*(dq1 + dq2 + dq3);

 0,0,0];
 
%M_inv_2 = inv(M);
M_inv = ...
[(m2*d2^2*d3^2*m3 + I3zz*m2*d2^2 - d3^2*l2^2*m3^2*cos(q3)^2 + d3^2*l2^2*m3^2 + I2zz*d3^2*m3 + I3zz*l2^2*m3 + I2zz*I3zz)/(I1zz*I2zz*I3zz + I3zz*d2^2*l1^2*m2^2 + I1zz*d3^2*l2^2*m3^2 + I2zz*d3^2*l1^2*m3^2 + I3zz*l1^2*l2^2*m3^2 + I2zz*I3zz*d1^2*m1 + I1zz*I3zz*d2^2*m2 + I1zz*I2zz*d3^2*m3 + I2zz*I3zz*l1^2*m2 + I1zz*I3zz*l2^2*m3 + I2zz*I3zz*l1^2*m3 + d3^2*l1^2*l2^2*m3^3 - I2zz*d3^2*l1^2*m3^2*cos(q2 + q3)^2 + I3zz*d1^2*d2^2*m1*m2 + I2zz*d1^2*d3^2*m1*m3 + I1zz*d2^2*d3^2*m2*m3 + I3zz*d1^2*l2^2*m1*m3 + I2zz*d3^2*l1^2*m2*m3 + I3zz*d2^2*l1^2*m2*m3 + I3zz*l1^2*l2^2*m2*m3 - I3zz*d2^2*l1^2*m2^2*cos(q2)^2 - I1zz*d3^2*l2^2*m3^2*cos(q3)^2 - I3zz*l1^2*l2^2*m3^2*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q3)^2 + d1^2*d3^2*l2^2*m1*m3^2 + d2^2*d3^2*l1^2*m2*m3^2 + d2^2*d3^2*l1^2*m2^2*m3 + d3^2*l1^2*l2^2*m2*m3^2 - d1^2*d3^2*l2^2*m1*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2^2*m3*cos(q2)^2 - d3^2*l1^2*l2^2*m2*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2*m3^2*cos(q2 + q3)^2 + d1^2*d2^2*d3^2*m1*m2*m3 - 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2)^2 - 2*I3zz*d2*l1^2*l2*m2*m3*cos(q2)^2 + 2*d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)*cos(q2)*cos(q3) + 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2 + q3)*cos(q2)*cos(q3)), ...
 -(m2*d2^2*d3^2*m3 + I3zz*m2*d2^2 + l1*m2*cos(q2)*d2*d3^2*m3 + I3zz*l1*m2*cos(q2)*d2 - d3^2*l2^2*m3^2*cos(q3)^2 + d3^2*l2^2*m3^2 - l1*cos(q2 + q3)*d3^2*l2*m3^2*cos(q3) + l1*cos(q2)*d3^2*l2*m3^2 + I2zz*d3^2*m3 + I3zz*l2^2*m3 + I3zz*l1*cos(q2)*l2*m3 + I2zz*I3zz)/(I1zz*I2zz*I3zz + I3zz*d2^2*l1^2*m2^2 + I1zz*d3^2*l2^2*m3^2 + I2zz*d3^2*l1^2*m3^2 + I3zz*l1^2*l2^2*m3^2 + I2zz*I3zz*d1^2*m1 + I1zz*I3zz*d2^2*m2 + I1zz*I2zz*d3^2*m3 + I2zz*I3zz*l1^2*m2 + I1zz*I3zz*l2^2*m3 + I2zz*I3zz*l1^2*m3 + d3^2*l1^2*l2^2*m3^3 - I2zz*d3^2*l1^2*m3^2*cos(q2 + q3)^2 + I3zz*d1^2*d2^2*m1*m2 + I2zz*d1^2*d3^2*m1*m3 + I1zz*d2^2*d3^2*m2*m3 + I3zz*d1^2*l2^2*m1*m3 + I2zz*d3^2*l1^2*m2*m3 + I3zz*d2^2*l1^2*m2*m3 + I3zz*l1^2*l2^2*m2*m3 - I3zz*d2^2*l1^2*m2^2*cos(q2)^2 - I1zz*d3^2*l2^2*m3^2*cos(q3)^2 - I3zz*l1^2*l2^2*m3^2*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q3)^2 + d1^2*d3^2*l2^2*m1*m3^2 + d2^2*d3^2*l1^2*m2*m3^2 + d2^2*d3^2*l1^2*m2^2*m3 + d3^2*l1^2*l2^2*m2*m3^2 - d1^2*d3^2*l2^2*m1*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2^2*m3*cos(q2)^2 - d3^2*l1^2*l2^2*m2*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2*m3^2*cos(q2 + q3)^2 + d1^2*d2^2*d3^2*m1*m2*m3 - 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2)^2 - 2*I3zz*d2*l1^2*l2*m2*m3*cos(q2)^2 + 2*d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)*cos(q2)*cos(q3) + 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2 + q3)*cos(q2)*cos(q3)), ...
 (d3^2*l1*l2*m3^2*cos(q2) - I2zz*d3*l1*m3*cos(q2 + q3) - d3*l1*l2^2*m3^2*cos(q2 + q3) + I3zz*d2*l1*m2*cos(q2) + I3zz*l1*l2*m3*cos(q2) - d3^2*l1*l2*m3^2*cos(q2 + q3)*cos(q3) + d3*l1*l2^2*m3^2*cos(q2)*cos(q3) - d2^2*d3*l1*m2*m3*cos(q2 + q3) + d2*d3^2*l1*m2*m3*cos(q2) + d2*d3*l1*l2*m2*m3*cos(q2)*cos(q3))/(I1zz*I2zz*I3zz + I3zz*d2^2*l1^2*m2^2 + I1zz*d3^2*l2^2*m3^2 + I2zz*d3^2*l1^2*m3^2 + I3zz*l1^2*l2^2*m3^2 + I2zz*I3zz*d1^2*m1 + I1zz*I3zz*d2^2*m2 + I1zz*I2zz*d3^2*m3 + I2zz*I3zz*l1^2*m2 + I1zz*I3zz*l2^2*m3 + I2zz*I3zz*l1^2*m3 + d3^2*l1^2*l2^2*m3^3 - I2zz*d3^2*l1^2*m3^2*cos(q2 + q3)^2 + I3zz*d1^2*d2^2*m1*m2 + I2zz*d1^2*d3^2*m1*m3 + I1zz*d2^2*d3^2*m2*m3 + I3zz*d1^2*l2^2*m1*m3 + I2zz*d3^2*l1^2*m2*m3 + I3zz*d2^2*l1^2*m2*m3 + I3zz*l1^2*l2^2*m2*m3 - I3zz*d2^2*l1^2*m2^2*cos(q2)^2 - I1zz*d3^2*l2^2*m3^2*cos(q3)^2 - I3zz*l1^2*l2^2*m3^2*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q3)^2 + d1^2*d3^2*l2^2*m1*m3^2 + d2^2*d3^2*l1^2*m2*m3^2 + d2^2*d3^2*l1^2*m2^2*m3 + d3^2*l1^2*l2^2*m2*m3^2 - d1^2*d3^2*l2^2*m1*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2^2*m3*cos(q2)^2 - d3^2*l1^2*l2^2*m2*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2*m3^2*cos(q2 + q3)^2 + d1^2*d2^2*d3^2*m1*m2*m3 - 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2)^2 - 2*I3zz*d2*l1^2*l2*m2*m3*cos(q2)^2 + 2*d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)*cos(q2)*cos(q3) + 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2 + q3)*cos(q2)*cos(q3));

 -(m2*d2^2*d3^2*m3 + I3zz*m2*d2^2 + l1*m2*cos(q2)*d2*d3^2*m3 + I3zz*l1*m2*cos(q2)*d2 - d3^2*l2^2*m3^2*cos(q3)^2 + d3^2*l2^2*m3^2 - l1*cos(q2 + q3)*d3^2*l2*m3^2*cos(q3) + l1*cos(q2)*d3^2*l2*m3^2 + I2zz*d3^2*m3 + I3zz*l2^2*m3 + I3zz*l1*cos(q2)*l2*m3 + I2zz*I3zz)/(I1zz*I2zz*I3zz + I3zz*d2^2*l1^2*m2^2 + I1zz*d3^2*l2^2*m3^2 + I2zz*d3^2*l1^2*m3^2 + I3zz*l1^2*l2^2*m3^2 + I2zz*I3zz*d1^2*m1 + I1zz*I3zz*d2^2*m2 + I1zz*I2zz*d3^2*m3 + I2zz*I3zz*l1^2*m2 + I1zz*I3zz*l2^2*m3 + I2zz*I3zz*l1^2*m3 + d3^2*l1^2*l2^2*m3^3 - I2zz*d3^2*l1^2*m3^2*cos(q2 + q3)^2 + I3zz*d1^2*d2^2*m1*m2 + I2zz*d1^2*d3^2*m1*m3 + I1zz*d2^2*d3^2*m2*m3 + I3zz*d1^2*l2^2*m1*m3 + I2zz*d3^2*l1^2*m2*m3 + I3zz*d2^2*l1^2*m2*m3 + I3zz*l1^2*l2^2*m2*m3 - I3zz*d2^2*l1^2*m2^2*cos(q2)^2 - I1zz*d3^2*l2^2*m3^2*cos(q3)^2 - I3zz*l1^2*l2^2*m3^2*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q3)^2 + d1^2*d3^2*l2^2*m1*m3^2 + d2^2*d3^2*l1^2*m2*m3^2 + d2^2*d3^2*l1^2*m2^2*m3 + d3^2*l1^2*l2^2*m2*m3^2 - d1^2*d3^2*l2^2*m1*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2^2*m3*cos(q2)^2 - d3^2*l1^2*l2^2*m2*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2*m3^2*cos(q2 + q3)^2 + d1^2*d2^2*d3^2*m1*m2*m3 - 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2)^2 - 2*I3zz*d2*l1^2*l2*m2*m3*cos(q2)^2 + 2*d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)*cos(q2)*cos(q3) + 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2 + q3)*cos(q2)*cos(q3)),...
  (I1zz*I3zz + I2zz*I3zz + d3^2*l1^2*m3^2 + d3^2*l2^2*m3^2 + I3zz*d1^2*m1 + I1zz*d3^2*m3 + I3zz*d2^2*m2 + I2zz*d3^2*m3 + I3zz*l1^2*m2 + I3zz*l1^2*m3 + I3zz*l2^2*m3 - d3^2*l1^2*m3^2*cos(q2 + q3)^2 + d1^2*d3^2*m1*m3 + d2^2*d3^2*m2*m3 + d3^2*l1^2*m2*m3 - d3^2*l2^2*m3^2*cos(q3)^2 + 2*d3^2*l1*l2*m3^2*cos(q2) + 2*I3zz*d2*l1*m2*cos(q2) + 2*I3zz*l1*l2*m3*cos(q2) - 2*d3^2*l1*l2*m3^2*cos(q2 + q3)*cos(q3) + 2*d2*d3^2*l1*m2*m3*cos(q2))/(I1zz*I2zz*I3zz + I3zz*d2^2*l1^2*m2^2 + I1zz*d3^2*l2^2*m3^2 + I2zz*d3^2*l1^2*m3^2 + I3zz*l1^2*l2^2*m3^2 + I2zz*I3zz*d1^2*m1 + I1zz*I3zz*d2^2*m2 + I1zz*I2zz*d3^2*m3 + I2zz*I3zz*l1^2*m2 + I1zz*I3zz*l2^2*m3 + I2zz*I3zz*l1^2*m3 + d3^2*l1^2*l2^2*m3^3 - I2zz*d3^2*l1^2*m3^2*cos(q2 + q3)^2 + I3zz*d1^2*d2^2*m1*m2 + I2zz*d1^2*d3^2*m1*m3 + I1zz*d2^2*d3^2*m2*m3 + I3zz*d1^2*l2^2*m1*m3 + I2zz*d3^2*l1^2*m2*m3 + I3zz*d2^2*l1^2*m2*m3 + I3zz*l1^2*l2^2*m2*m3 - I3zz*d2^2*l1^2*m2^2*cos(q2)^2 - I1zz*d3^2*l2^2*m3^2*cos(q3)^2 - I3zz*l1^2*l2^2*m3^2*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q3)^2 + d1^2*d3^2*l2^2*m1*m3^2 + d2^2*d3^2*l1^2*m2*m3^2 + d2^2*d3^2*l1^2*m2^2*m3 + d3^2*l1^2*l2^2*m2*m3^2 - d1^2*d3^2*l2^2*m1*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2^2*m3*cos(q2)^2 - d3^2*l1^2*l2^2*m2*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2*m3^2*cos(q2 + q3)^2 + d1^2*d2^2*d3^2*m1*m2*m3 - 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2)^2 - 2*I3zz*d2*l1^2*l2*m2*m3*cos(q2)^2 + 2*d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)*cos(q2)*cos(q3) + 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2 + q3)*cos(q2)*cos(q3)),...
 -(m1*d1^2*d3^2*m3 + m1*cos(q3)*d1^2*d3*l2*m3 + I3zz*m1*d1^2 - m2*d2^2*d3*l1*m3*cos(q2 + q3) + m2*cos(q2)*d2*d3^2*l1*m3 - m2*cos(q2)*d2*d3*l1^2*m3*cos(q2 + q3) + m2*cos(q2)*cos(q3)*d2*d3*l1*l2*m3 + I3zz*m2*cos(q2)*d2*l1 - d3^2*l1^2*m3^2*cos(q2 + q3)^2 + d3^2*l1^2*m3^2 + m2*d3^2*l1^2*m3 - cos(q3)*d3^2*l1*l2*m3^2*cos(q2 + q3) + cos(q2)*d3^2*l1*l2*m3^2 + I1zz*d3^2*m3 - cos(q2)*d3*l1^2*l2*m3^2*cos(q2 + q3) + cos(q3)*d3*l1^2*l2*m3^2 + m2*cos(q3)*d3*l1^2*l2*m3 - d3*l1*l2^2*m3^2*cos(q2 + q3) + cos(q2)*cos(q3)*d3*l1*l2^2*m3^2 - I2zz*d3*l1*m3*cos(q2 + q3) + I1zz*cos(q3)*d3*l2*m3 + I3zz*l1^2*m3 + I3zz*m2*l1^2 + I3zz*cos(q2)*l1*l2*m3 + I1zz*I3zz)/(I1zz*I2zz*I3zz + I3zz*d2^2*l1^2*m2^2 + I1zz*d3^2*l2^2*m3^2 + I2zz*d3^2*l1^2*m3^2 + I3zz*l1^2*l2^2*m3^2 + I2zz*I3zz*d1^2*m1 + I1zz*I3zz*d2^2*m2 + I1zz*I2zz*d3^2*m3 + I2zz*I3zz*l1^2*m2 + I1zz*I3zz*l2^2*m3 + I2zz*I3zz*l1^2*m3 + d3^2*l1^2*l2^2*m3^3 - I2zz*d3^2*l1^2*m3^2*cos(q2 + q3)^2 + I3zz*d1^2*d2^2*m1*m2 + I2zz*d1^2*d3^2*m1*m3 + I1zz*d2^2*d3^2*m2*m3 + I3zz*d1^2*l2^2*m1*m3 + I2zz*d3^2*l1^2*m2*m3 + I3zz*d2^2*l1^2*m2*m3 + I3zz*l1^2*l2^2*m2*m3 - I3zz*d2^2*l1^2*m2^2*cos(q2)^2 - I1zz*d3^2*l2^2*m3^2*cos(q3)^2 - I3zz*l1^2*l2^2*m3^2*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q3)^2 + d1^2*d3^2*l2^2*m1*m3^2 + d2^2*d3^2*l1^2*m2*m3^2 + d2^2*d3^2*l1^2*m2^2*m3 + d3^2*l1^2*l2^2*m2*m3^2 - d1^2*d3^2*l2^2*m1*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2^2*m3*cos(q2)^2 - d3^2*l1^2*l2^2*m2*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2*m3^2*cos(q2 + q3)^2 + d1^2*d2^2*d3^2*m1*m2*m3 - 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2)^2 - 2*I3zz*d2*l1^2*l2*m2*m3*cos(q2)^2 + 2*d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)*cos(q2)*cos(q3) + 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2 + q3)*cos(q2)*cos(q3));

 (d3^2*l1*l2*m3^2*cos(q2) - I2zz*d3*l1*m3*cos(q2 + q3) - d3*l1*l2^2*m3^2*cos(q2 + q3) + I3zz*d2*l1*m2*cos(q2) + I3zz*l1*l2*m3*cos(q2) - d3^2*l1*l2*m3^2*cos(q2 + q3)*cos(q3) + d3*l1*l2^2*m3^2*cos(q2)*cos(q3) - d2^2*d3*l1*m2*m3*cos(q2 + q3) + d2*d3^2*l1*m2*m3*cos(q2) + d2*d3*l1*l2*m2*m3*cos(q2)*cos(q3))/(I1zz*I2zz*I3zz + I3zz*d2^2*l1^2*m2^2 + I1zz*d3^2*l2^2*m3^2 + I2zz*d3^2*l1^2*m3^2 + I3zz*l1^2*l2^2*m3^2 + I2zz*I3zz*d1^2*m1 + I1zz*I3zz*d2^2*m2 + I1zz*I2zz*d3^2*m3 + I2zz*I3zz*l1^2*m2 + I1zz*I3zz*l2^2*m3 + I2zz*I3zz*l1^2*m3 + d3^2*l1^2*l2^2*m3^3 - I2zz*d3^2*l1^2*m3^2*cos(q2 + q3)^2 + I3zz*d1^2*d2^2*m1*m2 + I2zz*d1^2*d3^2*m1*m3 + I1zz*d2^2*d3^2*m2*m3 + I3zz*d1^2*l2^2*m1*m3 + I2zz*d3^2*l1^2*m2*m3 + I3zz*d2^2*l1^2*m2*m3 + I3zz*l1^2*l2^2*m2*m3 - I3zz*d2^2*l1^2*m2^2*cos(q2)^2 - I1zz*d3^2*l2^2*m3^2*cos(q3)^2 - I3zz*l1^2*l2^2*m3^2*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q3)^2 + d1^2*d3^2*l2^2*m1*m3^2 + d2^2*d3^2*l1^2*m2*m3^2 + d2^2*d3^2*l1^2*m2^2*m3 + d3^2*l1^2*l2^2*m2*m3^2 - d1^2*d3^2*l2^2*m1*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2^2*m3*cos(q2)^2 - d3^2*l1^2*l2^2*m2*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2*m3^2*cos(q2 + q3)^2 + d1^2*d2^2*d3^2*m1*m2*m3 - 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2)^2 - 2*I3zz*d2*l1^2*l2*m2*m3*cos(q2)^2 + 2*d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)*cos(q2)*cos(q3) + 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2 + q3)*cos(q2)*cos(q3)),...
 -(m1*d1^2*d3^2*m3 + m1*cos(q3)*d1^2*d3*l2*m3 + I3zz*m1*d1^2 - m2*d2^2*d3*l1*m3*cos(q2 + q3) + m2*cos(q2)*d2*d3^2*l1*m3 - m2*cos(q2)*d2*d3*l1^2*m3*cos(q2 + q3) + m2*cos(q2)*cos(q3)*d2*d3*l1*l2*m3 + I3zz*m2*cos(q2)*d2*l1 - d3^2*l1^2*m3^2*cos(q2 + q3)^2 + d3^2*l1^2*m3^2 + m2*d3^2*l1^2*m3 - cos(q3)*d3^2*l1*l2*m3^2*cos(q2 + q3) + cos(q2)*d3^2*l1*l2*m3^2 + I1zz*d3^2*m3 - cos(q2)*d3*l1^2*l2*m3^2*cos(q2 + q3) + cos(q3)*d3*l1^2*l2*m3^2 + m2*cos(q3)*d3*l1^2*l2*m3 - d3*l1*l2^2*m3^2*cos(q2 + q3) + cos(q2)*cos(q3)*d3*l1*l2^2*m3^2 - I2zz*d3*l1*m3*cos(q2 + q3) + I1zz*cos(q3)*d3*l2*m3 + I3zz*l1^2*m3 + I3zz*m2*l1^2 + I3zz*cos(q2)*l1*l2*m3 + I1zz*I3zz)/(I1zz*I2zz*I3zz + I3zz*d2^2*l1^2*m2^2 + I1zz*d3^2*l2^2*m3^2 + I2zz*d3^2*l1^2*m3^2 + I3zz*l1^2*l2^2*m3^2 + I2zz*I3zz*d1^2*m1 + I1zz*I3zz*d2^2*m2 + I1zz*I2zz*d3^2*m3 + I2zz*I3zz*l1^2*m2 + I1zz*I3zz*l2^2*m3 + I2zz*I3zz*l1^2*m3 + d3^2*l1^2*l2^2*m3^3 - I2zz*d3^2*l1^2*m3^2*cos(q2 + q3)^2 + I3zz*d1^2*d2^2*m1*m2 + I2zz*d1^2*d3^2*m1*m3 + I1zz*d2^2*d3^2*m2*m3 + I3zz*d1^2*l2^2*m1*m3 + I2zz*d3^2*l1^2*m2*m3 + I3zz*d2^2*l1^2*m2*m3 + I3zz*l1^2*l2^2*m2*m3 - I3zz*d2^2*l1^2*m2^2*cos(q2)^2 - I1zz*d3^2*l2^2*m3^2*cos(q3)^2 - I3zz*l1^2*l2^2*m3^2*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q3)^2 + d1^2*d3^2*l2^2*m1*m3^2 + d2^2*d3^2*l1^2*m2*m3^2 + d2^2*d3^2*l1^2*m2^2*m3 + d3^2*l1^2*l2^2*m2*m3^2 - d1^2*d3^2*l2^2*m1*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2^2*m3*cos(q2)^2 - d3^2*l1^2*l2^2*m2*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2*m3^2*cos(q2 + q3)^2 + d1^2*d2^2*d3^2*m1*m2*m3 - 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2)^2 - 2*I3zz*d2*l1^2*l2*m2*m3*cos(q2)^2 + 2*d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)*cos(q2)*cos(q3) + 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2 + q3)*cos(q2)*cos(q3)),...
 (I1zz*I2zz + I1zz*I3zz + d2^2*l1^2*m2^2 + d3^2*l1^2*m3^2 + l1^2*l2^2*m3^2 + I2zz*d1^2*m1 + I1zz*d2^2*m2 + I3zz*d1^2*m1 + I1zz*d3^2*m3 + I2zz*l1^2*m2 + I1zz*l2^2*m3 + I2zz*l1^2*m3 + I3zz*l1^2*m2 + I3zz*l1^2*m3 - d3^2*l1^2*m3^2*cos(q2 + q3)^2 + d1^2*d2^2*m1*m2 + d1^2*d3^2*m1*m3 + d1^2*l2^2*m1*m3 + d2^2*l1^2*m2*m3 + d3^2*l1^2*m2*m3 + l1^2*l2^2*m2*m3 - d2^2*l1^2*m2^2*cos(q2)^2 - l1^2*l2^2*m3^2*cos(q2)^2 + 2*d3*l1^2*l2*m3^2*cos(q3) + 2*I1zz*d3*l2*m3*cos(q3) - 2*d2*l1^2*l2*m2*m3*cos(q2)^2 - 2*d3*l1^2*l2*m3^2*cos(q2 + q3)*cos(q2) + 2*d1^2*d3*l2*m1*m3*cos(q3) + 2*d3*l1^2*l2*m2*m3*cos(q3) - 2*d2*d3*l1^2*m2*m3*cos(q2 + q3)*cos(q2))/(I1zz*I2zz*I3zz + I3zz*d2^2*l1^2*m2^2 + I1zz*d3^2*l2^2*m3^2 + I2zz*d3^2*l1^2*m3^2 + I3zz*l1^2*l2^2*m3^2 + I2zz*I3zz*d1^2*m1 + I1zz*I3zz*d2^2*m2 + I1zz*I2zz*d3^2*m3 + I2zz*I3zz*l1^2*m2 + I1zz*I3zz*l2^2*m3 + I2zz*I3zz*l1^2*m3 + d3^2*l1^2*l2^2*m3^3 - I2zz*d3^2*l1^2*m3^2*cos(q2 + q3)^2 + I3zz*d1^2*d2^2*m1*m2 + I2zz*d1^2*d3^2*m1*m3 + I1zz*d2^2*d3^2*m2*m3 + I3zz*d1^2*l2^2*m1*m3 + I2zz*d3^2*l1^2*m2*m3 + I3zz*d2^2*l1^2*m2*m3 + I3zz*l1^2*l2^2*m2*m3 - I3zz*d2^2*l1^2*m2^2*cos(q2)^2 - I1zz*d3^2*l2^2*m3^2*cos(q3)^2 - I3zz*l1^2*l2^2*m3^2*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)^2 - d3^2*l1^2*l2^2*m3^3*cos(q2)^2 - d3^2*l1^2*l2^2*m3^3*cos(q3)^2 + d1^2*d3^2*l2^2*m1*m3^2 + d2^2*d3^2*l1^2*m2*m3^2 + d2^2*d3^2*l1^2*m2^2*m3 + d3^2*l1^2*l2^2*m2*m3^2 - d1^2*d3^2*l2^2*m1*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2^2*m3*cos(q2)^2 - d3^2*l1^2*l2^2*m2*m3^2*cos(q3)^2 - d2^2*d3^2*l1^2*m2*m3^2*cos(q2 + q3)^2 + d1^2*d2^2*d3^2*m1*m2*m3 - 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2)^2 - 2*I3zz*d2*l1^2*l2*m2*m3*cos(q2)^2 + 2*d3^2*l1^2*l2^2*m3^3*cos(q2 + q3)*cos(q2)*cos(q3) + 2*d2*d3^2*l1^2*l2*m2*m3^2*cos(q2 + q3)*cos(q2)*cos(q3))];
 
%error = norm(M_inv-M_inv_2);
%error
M_ts = J_T_inv*M*J_inv;
c_ts = M_ts*(J*M_inv*c - dJ*dq);
S_ts = M_ts*(J*M_inv*S - dJ);
g_ts = M_ts*J*M_inv*g;

dv = J*ddq + dJ*dq; % dv_1

%dv = inv(M_ts)*(u_ts-g_ts-c_ts); dv_2
%dv_1
%dv_2
%err = norm(dv_1-dv_2);
%err
end

